// Automatically generated by MockGen. DO NOT EDIT!
// Source: modules/receiver/receiver.go

package mock_receiver

import (
	gomock "github.com/golang/mock/gomock"
)

// Mock of user interface
type Mockuser struct {
	ctrl     *gomock.Controller
	recorder *_MockuserRecorder
}

// Recorder for Mockuser (not exported)
type _MockuserRecorder struct {
	mock *Mockuser
}

func NewMockuser(ctrl *gomock.Controller) *Mockuser {
	mock := &Mockuser{ctrl: ctrl}
	mock.recorder = &_MockuserRecorder{mock}
	return mock
}

func (_m *Mockuser) EXPECT() *_MockuserRecorder {
	return _m.recorder
}

func (_m *Mockuser) IsValid() bool {
	ret := _m.ctrl.Call(_m, "IsValid")
	ret0, _ := ret[0].(bool)
	return ret0
}

func (_mr *_MockuserRecorder) IsValid() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "IsValid")
}

func (_m *Mockuser) CreateUser(m string, f string, n string, a int) (string, string, string, int) {
	ret := _m.ctrl.Call(_m, "CreateUser", m, f, n, a)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(string)
	ret2, _ := ret[2].(string)
	ret3, _ := ret[3].(int)
	return ret0, ret1, ret2, ret3
}

func (_mr *_MockuserRecorder) CreateUser(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "CreateUser", arg0, arg1, arg2, arg3)
}

func (_m *Mockuser) GetAge() bool {
	ret := _m.ctrl.Call(_m, "GetAge")
	ret0, _ := ret[0].(bool)
	return ret0
}

func (_mr *_MockuserRecorder) GetAge() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "GetAge")
}
