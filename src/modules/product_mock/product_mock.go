// Automatically generated by MockGen. DO NOT EDIT!
// Source: modules/product/product.go

package mock_product

import (
	gomock "github.com/golang/mock/gomock"
	receiver "modules/receiver"
)

// Mock of P interface
type MockP struct {
	ctrl     *gomock.Controller
	recorder *_MockPRecorder
}

// Recorder for MockP (not exported)
type _MockPRecorder struct {
	mock *MockP
}

func NewMockP(ctrl *gomock.Controller) *MockP {
	mock := &MockP{ctrl: ctrl}
	mock.recorder = &_MockPRecorder{mock}
	return mock
}

func (_m *MockP) EXPECT() *_MockPRecorder {
	return _m.recorder
}

func (_m *MockP) IsValid() bool {
	ret := _m.ctrl.Call(_m, "IsValid")
	ret0, _ := ret[0].(bool)
	return ret0
}

func (_mr *_MockPRecorder) IsValid() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "IsValid")
}

func (_m *MockP) GetName() string {
	ret := _m.ctrl.Call(_m, "GetName")
	ret0, _ := ret[0].(string)
	return ret0
}

func (_mr *_MockPRecorder) GetName() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "GetName")
}

func (_m *MockP) SetName() string {
	ret := _m.ctrl.Call(_m, "SetName")
	ret0, _ := ret[0].(string)
	return ret0
}

func (_mr *_MockPRecorder) SetName() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "SetName")
}

func (_m *MockP) GetOwner() string {
	ret := _m.ctrl.Call(_m, "GetOwner")
	ret0, _ := ret[0].(string)
	return ret0
}

func (_mr *_MockPRecorder) GetOwner() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "GetOwner")
}

func (_m *MockP) SetOwner() string {
	ret := _m.ctrl.Call(_m, "SetOwner")
	ret0, _ := ret[0].(string)
	return ret0
}

func (_mr *_MockPRecorder) SetOwner() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "SetOwner")
}

func (_m *MockP) GetStatus() string {
	ret := _m.ctrl.Call(_m, "GetStatus")
	ret0, _ := ret[0].(string)
	return ret0
}

func (_mr *_MockPRecorder) GetStatus() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "GetStatus")
}

func (_m *MockP) CreateProduct(n string, s int, ow *receiver.UserStruct) (string, int, *receiver.UserStruct) {
	ret := _m.ctrl.Call(_m, "CreateProduct", n, s, ow)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(int)
	ret2, _ := ret[2].(*receiver.UserStruct)
	return ret0, ret1, ret2
}

func (_mr *_MockPRecorder) CreateProduct(arg0, arg1, arg2 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "CreateProduct", arg0, arg1, arg2)
}
